You are a software developer and have been given a new project. Review the project, then I would like for you to begin writing code for the frontend directory. If you would like to start with a different directory please let me know.

Project overview:
1. System Components

    Web Frontend - The user interface presented in a web browser.
    Backend API - Processes requests from the web frontend, handling logic related to password generation, encryption, and storage.
    Password Generator - Generates random, strong passwords.
    Encryption Engine - Encrypts the generated password.
    Database - Stores the encrypted passwords and user-related data.
    Authentication & Authorization System - Ensures users can securely access their passwords and no one else's.

2. Workflow

    User Interaction
        Users visit the website.
        They register or log in.
        They can generate new passwords or retrieve stored ones through the web frontend.

    Backend Processes
        Upon a user's request to generate a password, the Password Generator is invoked.
        Once generated, the password is encrypted using the Encryption Engine.
        Encrypted password, along with any necessary metadata, is saved in the Database.
        When a user requests to view a password, the system retrieves the encrypted password from the Database, decrypts it, and sends it to the frontend.

    Authentication & Authorization
        Users must be authenticated before accessing any functionality.
        Implement sessions or JWT (JSON Web Tokens) to manage logged-in users.
        Ensure users can only access passwords they've generated (authorization).

3. Other Considerations

    HTTPS - Ensure your service runs over HTTPS to protect data in transit.
    Web Security Headers - Use security headers like Content Security Policy (CSP), HTTP Strict Transport Security (HSTS), and others to protect against web-based threats.
    Input Validation & Sanitization - Always validate and sanitize input to prevent attacks like SQL injection, XSS, etc.
    Cross-Origin Resource Sharing (CORS) - If you're making API calls from a different domain/subdomain, set up CORS properly.
    DDoS Protection - Consider DDoS protection measures or services.
    Rate Limiting - Implement rate limiting on your backend to protect against brute force and excessive requests.
    Backup and Recovery - Ensure regular backups of your database.
    Monitoring & Logging - Monitor access and set up alerts for unusual activities. Store logs securely.

4. Example Technology Stack

    Web Frontend: Modern frameworks like React, Vue.js, or Angular.
    Backend API: Express.js with Node.js, Flask or Django with Python, or another suitable backend framework.
    Password Generator: Libraries suitable for the backend language, such as Python's secrets or crypto libraries in JavaScript.
    Encryption Engine: Libraries like crypto in Node.js or PyCrypto in Python.
    Database: Relational databases like PostgreSQL or MySQL. Ensure encryption at rest.
    Authentication & Authorization: JWT for session management, OAuth for third-party integration, or tools like Auth0.

5. Sample Flow

    User visits the website.
    User logs in or registers.
    Once authenticated, the user is presented with options to generate or retrieve passwords.
    The backend API processes these requests, interacting with the Password Generator, Encryption Engine, and Database as needed.
    Data is displayed to the user on the web frontend based on their requests.

Direcory Layout:
/password-manager
|-- /frontend
|   |-- /public
|   |   |-- index.html
|   |   |-- /assets
|   |       |-- /images
|   |       |-- /styles
|   |       |-- /scripts
|   |-- /src
|   |   |-- App.js
|   |   |-- /components
|   |   |   |-- Login.js
|   |   |   |-- Register.js
|   |   |   |-- Dashboard.js
|   |   |   |-- PasswordGenerator.js
|   |   |   |-- PasswordList.js
|   |   |-- /utils
|   |       |-- api.js
|   |       |-- auth.js
|-- /backend
|   |-- server.js
|   |-- /routes
|   |   |-- auth.js
|   |   |-- passwords.js
|   |-- /models
|   |   |-- user.js
|   |   |-- password.js
|   |-- /middleware
|   |   |-- auth.js
|   |   |-- rateLimiter.js
|   |-- /utils
|   |   |-- passwordGenerator.js
|   |   |-- encryptionEngine.js
|   |-- /config
|       |-- db.js
|-- /database
|   |-- /migrations
|   |-- /seeds
|-- README.md
|-- .gitignore
|-- package.json

Contents:
    frontend: Contains all the frontend code.
        public: Static files that are served directly.
        src: Source code for the frontend.
            components: React/Vue/Angular components.
            utils: Utility functions, e.g., API calls and authentication helpers.
    backend: Contains all the backend code.
        routes: Express/Flask/Django routes.
        models: Database models/schemas.
        middleware: Middleware functions, e.g., authentication and rate limiting.
        utils: Backend utility functions, e.g., password generation and encryption.
        config: Configuration files, e.g., database connection.
    database: Database-related files, e.g., migrations and seeds.
Other Files:
    README.md: Documentation for the project.
    .gitignore: List of files and directories to be ignored by Git.
    package.json: Project metadata and dependencies (if using Node.js).